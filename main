import ee
import json
import os
import traceback
from flask import Flask, render_template, request, jsonify
from oauth2client.service_account import ServiceAccountCredentials

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEBUG = os.environ.get("DEBUG", "False").lower() == "true"

def initialize_earth_engine():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Earth Engine"""
    try:
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Earth Engine...")
        
        service_account_info = json.loads(os.environ["GEE_CREDENTIALS"])
        
        credentials = ee.ServiceAccountCredentials(
            service_account_info["client_email"],
            key_data=json.dumps(service_account_info)
        )
        ee.Initialize(credentials)
        print("‚úÖ Earth Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Earth Engine: {str(e)}")
        return False

def mask_clouds(img):
    """–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –æ–±–ª–∞–∫–æ–≤ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–≤–æ—é –ª–æ–≥–∏–∫—É"""
    scl = img.select("SCL")
    allowed = scl.eq(4).Or(scl.eq(5)).Or(scl.eq(6)).Or(scl.eq(7))
    return img.updateMask(allowed).resample("bilinear")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ–π"""
    return render_template('index.html')

@app.route('/api/get_sentinel_image', methods=['POST'])
def get_sentinel_image():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.json
        geometry = ee.Geometry.Rectangle(data['bounds'])
        start_date = data['start_date']
        end_date = data['end_date']
        cloud_filter = data.get('cloud_filter', 30)
        enable_smoothing = data.get('smoothing', True)
        
        print(f"üì° –ó–∞–ø—Ä–æ—Å —Å–Ω–∏–º–∫–∞: {start_date} - {end_date}, –æ–±–ª–∞—á–Ω–æ—Å—Ç—å < {cloud_filter}%")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å–Ω–∏–º–∫–æ–≤
        collection = (
            ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
            .filterDate(start_date, end_date)
            .filterBounds(geometry)
            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', cloud_filter))
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∫—É –æ–±–ª–∞–∫–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        if enable_smoothing:
            collection = collection.map(mask_clouds)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∑–∞–∏–∫—É
        mosaic = collection.median()
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Ç–∞–π–ª–æ–≤
        tile_info = ee.data.getMapId({
            "image": mosaic,
            "bands": ["B4", "B3", "B2"],  # RGB
            "min": "0,0,0",
            "max": "3000,3000,3000",
            "region": geometry
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ç–∞–π–ª–æ–≤
        map_id = tile_info["mapid"]
        tile_url = f"https://earthengine.googleapis.com/v1/maps/{map_id}/tiles/{{z}}/{{x}}/{{y}}"
        
        return jsonify({
            'success': True,
            'tile_url': tile_url,
            'image_count': collection.size().getInfo()
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/regions')
def get_regions():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    try:
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        fc = ee.FeatureCollection("projects/ee-romantik1994/assets/region")
        regions = fc.aggregate_array('title').getInfo()
        return jsonify({'regions': regions})
    except Exception as e:
        return jsonify({'regions': []})

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Earth Engine –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if initialize_earth_engine():
        app.run(
            host='0.0.0.0', 
            port=5000, 
            debug=DEBUG
        )
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
