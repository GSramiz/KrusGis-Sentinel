import ee
import json
import os
import traceback
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEBUG = os.environ.get("DEBUG", "False").lower() == "true"

def initialize_earth_engine():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Earth Engine"""
    try:
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Earth Engine...")
        
        # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (GitHub Secrets)
        gee_credentials = os.environ.get("GEE_CREDENTIALS")
        
        if not gee_credentials:
            raise ValueError("GEE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ü–∞—Ä—Å–∏–º JSON credentials
        service_account_info = json.loads(gee_credentials)
        
        # –°–æ–∑–¥–∞–µ–º credentials –¥–ª—è Earth Engine
        credentials = ee.ServiceAccountCredentials(
            service_account_info["client_email"],
            key_data=json.dumps(service_account_info)
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Earth Engine
        ee.Initialize(credentials)
        print("‚úÖ Earth Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Earth Engine: {str(e)}")
        return False

def mask_clouds(img):
    """–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –æ–±–ª–∞–∫–æ–≤"""
    scl = img.select("SCL")
    allowed = scl.eq(4).Or(scl.eq(5)).Or(scl.eq(6)).Or(scl.eq(7))
    return img.updateMask(allowed).resample("bilinear")

def calculate_ndvi(img):
    """–†–∞—Å—á–µ—Ç NDVI –∏–Ω–¥–µ–∫—Å–∞"""
    ndvi = img.normalizedDifference(['B8', 'B4']).rename('NDVI')
    return img.addBands(ndvi)

def calculate_ndwi(img):
    """–†–∞—Å—á–µ—Ç NDWI –∏–Ω–¥–µ–∫—Å–∞"""
    ndwi = img.normalizedDifference(['B3', 'B8']).rename('NDWI')
    return img.addBands(ndwi)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º –Ω–∞—à HTML"""
    return render_template('index.html')

@app.route('/api/get_sentinel_image', methods=['POST'])
def get_sentinel_image():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.json
        bounds = data['bounds']
        geometry = ee.Geometry.Rectangle(bounds)
        start_date = data['start_date']
        end_date = data['end_date']
        cloud_filter = data.get('cloud_filter', 30)
        enable_smoothing = data.get('smoothing', True)
        layer_type = data.get('layer', 'TRUE_COLOR')
        
        print(f"üì° –ó–∞–ø—Ä–æ—Å —Å–Ω–∏–º–∫–∞: {start_date} - {end_date}, –æ–±–ª–∞—á–Ω–æ—Å—Ç—å < {cloud_filter}%, —Å–ª–æ–π: {layer_type}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–ª–æ–µ–≤
        band_configs = {
            'TRUE_COLOR': {
                'bands': ['B4', 'B3', 'B2'], 
                'min': '0,0,0', 
                'max': '3000,3000,3000',
                'description': '–ù–∞—Å—Ç–æ—è—â–∏–µ —Ü–≤–µ—Ç–∞ (RGB)'
            },
            'FALSE_COLOR': {
                'bands': ['B8', 'B4', 'B3'], 
                'min': '0,0,0', 
                'max': '3000,3000,3000',
                'description': '–õ–æ–∂–Ω—ã–µ —Ü–≤–µ—Ç–∞'
            },
            'NDVI': {
                'bands': ['NDVI'], 
                'min': '-1', 
                'max': '1',
                'palette': ['red', 'yellow', 'green'],
                'description': 'NDVI - –í–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å'
            },
            'NDWI': {
                'bands': ['NDWI'], 
                'min': '-1', 
                'max': '1', 
                'palette': ['white', 'blue'],
                'description': 'NDWI - –í–æ–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å'
            }
        }
        
        config = band_configs.get(layer_type, band_configs['TRUE_COLOR'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å–Ω–∏–º–∫–æ–≤
        collection = (
            ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
            .filterDate(start_date, end_date)
            .filterBounds(geometry)
            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', cloud_filter))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if layer_type == 'NDVI':
            collection = collection.map(calculate_ndvi)
        elif layer_type == 'NDWI':
            collection = collection.map(calculate_ndwi)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∫—É –æ–±–ª–∞–∫–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        if enable_smoothing:
            collection = collection.map(mask_clouds)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∑–∞–∏–∫—É
        mosaic = collection.median()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        vis_params = {
            "bands": config['bands'],
            "min": config.get('min', '0'),
            "max": config.get('max', '3000'),
            "region": geometry
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤
        if 'palette' in config:
            vis_params["palette"] = config['palette']
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Ç–∞–π–ª–æ–≤
        tile_info = ee.data.getMapId({
            "image": mosaic,
            **vis_params
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ç–∞–π–ª–æ–≤
        map_id = tile_info["mapid"]
        tile_url = f"https://earthengine.googleapis.com/v1/maps/{map_id}/tiles/{{z}}/{{x}}/{{y}}"
        
        image_count = collection.size().getInfo()
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {image_count} —Å–Ω–∏–º–∫–æ–≤")
        
        return jsonify({
            'success': True,
            'tile_url': tile_url,
            'image_count': image_count,
            'layer_info': {
                'type': layer_type,
                'description': config['description']
            }
        })
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy', 
        'service': 'KrusGis Sentinel API',
        'gee_initialized': ee.data._initialized,
        'timestamp': datetime.now().isoformat()
    })

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Earth Engine –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if initialize_earth_engine():
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
else:
    print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Earth Engine")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ KrusGis Sentinel API...")
    app.run(
        host='0.0.0.0', 
        port=int(os.environ.get("PORT", 5000)), 
        debug=DEBUG
    )
